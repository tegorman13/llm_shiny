---
title: "ojs-shinylive app in Quarto!"
code-fold: true
format:
  html:
    css: style.css
    grid:
      body-width: 1100px
filters:
  - shinylive
---








# v1 - chatbot2

- working but exposes api key

```{ojs}

viewof table = {
  // Create the main container
  const container = html`<div>
    <h2>Action Plan Creation - Davis Family Electricity Reduction</h2>
    <table class="table table-bordered">
      <thead>
        <tr>
          <th>Category</th>
          <th>Last Year (Davis Family)</th>
          <th>Massachusetts Average</th>
          <th>Action Plan 1</th>
          <th>Action Plan 2</th>
        </tr>
      </thead>
      <tbody>
        ${createRow("Cooling (Central A/C)", 419, 322)}
        ${createRow("Heating the Home", 26751, 19108)}
        ${createRow("Water Heating", 10543, 5070)}
        ${createRow("Refrigerator", 1230, 1025)}
        ${createRow("Other (TV, Lighting, Electronics, etc.)", 7350, 6682)}
        ${createTotalRow()}
      </tbody>
    </table>
    <div class="chatBot">
      <header>
        <h3>Energy Reduction Assistant</h3>
      </header>
      <ul class="chatbox">
        <li class="chat-incoming chat">
          <p>Hello! I can help you create an effective energy reduction plan. Feel free to ask questions about reducing electricity usage in any category.</p>
        </li>
      </ul>
      <div class="chat-input">
        <textarea placeholder="Ask for advice about your action plan..." rows="1"></textarea>
        <button id="sendBtn">Send</button>
      </div>
    </div>
  </div>`;


  // Helper function to create a row with sliders
  function createRow(category, lastYear, maAvg) {
    const row = html`<tr>
      <td>${category}</td>
      <td>${lastYear}</td>
      <td>${maAvg}</td>
      <td><input type="range" min="0" max="${lastYear}" value="${lastYear}" 
          oninput="this.nextElementSibling.value = this.value"
          style="width: 100%">
          <output>${lastYear}</output>
      </td>
      <td><input type="range" min="0" max="${lastYear}" value="${lastYear}" 
          oninput="this.nextElementSibling.value = this.value"
          style="width: 100%">
          <output>${lastYear}</output>
      </td>
    </tr>`;
    return row;
  }

  // Helper function to create the total row
  function createTotalRow() {
    const row = html`<tr>
      <td><strong>Total kWh</strong></td>
      <td>46,293</td>
      <td>32,207</td>
      <td id="total-plan1"><strong>46,293</strong></td>
      <td id="total-plan2"><strong>46,293</strong></td>
    </tr>`;
    return row;
  }

  // Add event listeners to update totals
  container.querySelectorAll('input[type="range"]').forEach(slider => {
    slider.addEventListener('input', updateTotals);
  });

  function updateTotals() {
    const rows = container.querySelectorAll('tr');
    let plan1Total = 0;
    let plan2Total = 0;

    // Sum up values from each row (excluding header and total rows)
    for (let i = 1; i < rows.length - 1; i++) {
      const plan1Value = parseInt(rows[i].querySelector('td:nth-child(4) output').value);
      const plan2Value = parseInt(rows[i].querySelector('td:nth-child(5) output').value);
      plan1Total += plan1Value;
      plan2Total += plan2Value;
    }

    // Update total displays
    container.querySelector('#total-plan1').textContent = plan1Total.toLocaleString();
    container.querySelector('#total-plan2').textContent = plan2Total.toLocaleString();
  }


  // Attach event listeners only after elements are created
  const chatInput = container.querySelector('.chat-input textarea');
  const sendButton = container.querySelector('#sendBtn');
  const chatbox = container.querySelector('.chatbox');

  async function generateResponse(userMessage) {
    try {
        const config = await fetch('/config.json').then((res) => res.json());
        const OPENAI_API_KEY = config.apiKey;
        console.log("Calling GPT3")
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'system',
              content:
                'You are an energy efficiency expert helping users create an electricity reduction plan. Focus on practical advice for reducing electricity usage in cooling, heating, water heating, refrigeration, and other household electronics.',
            },
            {
              role: 'user',
              content: userMessage,
            },
          ],
        }),
      });

      const data = await response.json();
      return data.choices[0].message.content;
    } catch (error) {
      return "Sorry, I'm having trouble connecting. Please try again later.";
    }
  }

  function addMessage(message, isOutgoing = false) {
    const li = document.createElement('li');
    li.className = `chat ${isOutgoing ? 'chat-outgoing' : 'chat-incoming'}`;
    li.innerHTML = `<p>${message}</p>`;
    chatbox.appendChild(li);
    chatbox.scrollTop = chatbox.scrollHeight;
  }

  async function handleChat() {
    const userMessage = chatInput.value.trim();
    if (!userMessage) return;

    addMessage(userMessage, true);
    chatInput.value = '';

    const response = await generateResponse(userMessage);
    addMessage(response);
  }

  sendButton.addEventListener('click', handleChat);
  chatInput.addEventListener('keyup', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleChat();
    }
  });

  return container;
}

```


# alternative front-end response
- reads key from config.json. 

```{ojs}

viewof table4 = {
  // Create the main container
  const container = html`<div>
    <h2>Action Plan Creation - Davis Family Electricity Reduction</h2>
    <table class="table table-bordered">
      <thead>
        <tr>
          <th>Category</th>
          <th>Last Year (Davis Family)</th>
          <th>Massachusetts Average</th>
          <th>Action Plan 1</th>
          <th>Action Plan 2</th>
        </tr>
      </thead>
      <tbody>
        ${createRow("Cooling (Central A/C)", 419, 322)}
        ${createRow("Heating the Home", 26751, 19108)}
        ${createRow("Water Heating", 10543, 5070)}
        ${createRow("Refrigerator", 1230, 1025)}
        ${createRow("Other (TV, Lighting, Electronics, etc.)", 7350, 6682)}
        ${createTotalRow()}
      </tbody>
    </table>
    <div class="chatBot">
      <header>
        <h3>Energy Reduction Assistant</h3>
      </header>
      <ul class="chatbox">
        <li class="chat-incoming chat">
          <p>Hello! I can help you create an effective energy reduction plan. Feel free to ask questions about reducing electricity usage in any category.</p>
        </li>
      </ul>
      <div class="chat-input">
        <textarea placeholder="Ask for advice about your action plan..." rows="1"></textarea>
        <button id="sendBtn">Send</button>
      </div>
    </div>
  </div>`;


  // Helper function to create a row with sliders
  function createRow(category, lastYear, maAvg) {
    const row = html`<tr>
      <td>${category}</td>
      <td>${lastYear}</td>
      <td>${maAvg}</td>
      <td><input type="range" min="0" max="${lastYear}" value="${lastYear}" 
          oninput="this.nextElementSibling.value = this.value"
          style="width: 100%">
          <output>${lastYear}</output>
      </td>
      <td><input type="range" min="0" max="${lastYear}" value="${lastYear}" 
          oninput="this.nextElementSibling.value = this.value"
          style="width: 100%">
          <output>${lastYear}</output>
      </td>
    </tr>`;
    return row;
  }

  // Helper function to create the total row
  function createTotalRow() {
    const row = html`<tr>
      <td><strong>Total kWh</strong></td>
      <td>46,293</td>
      <td>32,207</td>
      <td id="total-plan1"><strong>46,293</strong></td>
      <td id="total-plan2"><strong>46,293</strong></td>
    </tr>`;
    return row;
  }

  // Add event listeners to update totals
  container.querySelectorAll('input[type="range"]').forEach(slider => {
    slider.addEventListener('input', updateTotals);
  });

  function updateTotals() {
    const rows = container.querySelectorAll('tr');
    let plan1Total = 0;
    let plan2Total = 0;

    // Sum up values from each row (excluding header and total rows)
    for (let i = 1; i < rows.length - 1; i++) {
      const plan1Value = parseInt(rows[i].querySelector('td:nth-child(4) output').value);
      const plan2Value = parseInt(rows[i].querySelector('td:nth-child(5) output').value);
      plan1Total += plan1Value;
      plan2Total += plan2Value;
    }

    // Update total displays
    container.querySelector('#total-plan1').textContent = plan1Total.toLocaleString();
    container.querySelector('#total-plan2').textContent = plan2Total.toLocaleString();
  }


  // Attach event listeners only after elements are created
  const chatInput = container.querySelector('.chat-input textarea');
  const sendButton = container.querySelector('#sendBtn');
  const chatbox = container.querySelector('.chatbox');


// Authorization: `Bearer ${OPENAI_API_KEY}`


  async function generateResponse(userMessage) {
    try {
  const config = await fetch('/config.json').then((res) => res.json());
    console.log(config)
  const OPENAI_API_KEY = config.apiKey;
        console.log("Calling GPT3")


        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json',
                Authorization: `Bearer ${OPENAI_API_KEY}`,
             },
            body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: [
                {
                    role: 'system',
                    content:
                    'You are an energy efficiency expert helping users create an electricity reduction plan.',
                },
                {
                    role: 'user',
                    content: userMessage,
                },
                ],
            }),
            });

      const data = await response.json();
      return data.choices[0].message.content;
    } catch (error) {
      return "Sorry, I'm having trouble connecting. Please try again later.";
    }
  }

  function addMessage(message, isOutgoing = false) {
    const li = document.createElement('li');
    li.className = `chat ${isOutgoing ? 'chat-outgoing' : 'chat-incoming'}`;
    li.innerHTML = `<p>${message}</p>`;
    chatbox.appendChild(li);
    chatbox.scrollTop = chatbox.scrollHeight;
  }

  async function handleChat() {
    const userMessage = chatInput.value.trim();
    if (!userMessage) return;

    addMessage(userMessage, true);
    chatInput.value = '';

    const response = await generateResponse(userMessage);
    addMessage(response);
  }

  sendButton.addEventListener('click', handleChat);
  chatInput.addEventListener('keyup', (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleChat();
    }
  });

  return container;
}

```





# v2 4o

```{ojs}
// Observable-based Action Plan Creation Task

viewof cooling_plan1 = Inputs.range([0, 419], {value: 419, step: 1, label: "Cooling Plan 1 (kWh)"})
viewof cooling_plan2 = Inputs.range([0, 419], {value: 419, step: 1, label: "Cooling Plan 2 (kWh)"})
viewof heating_plan1 = Inputs.range([0, 26751], {value: 26751, step: 1, label: "Heating Plan 1 (kWh)"})
viewof heating_plan2 = Inputs.range([0, 26751], {value: 26751, step: 1, label: "Heating Plan 2 (kWh)"})
viewof water_plan1 = Inputs.range([0, 10543], {value: 10543, step: 1, label: "Water Heating Plan 1 (kWh)"})
viewof water_plan2 = Inputs.range([0, 10543], {value: 10543, step: 1, label: "Water Heating Plan 2 (kWh)"})
viewof fridge_plan1 = Inputs.range([0, 1230], {value: 1230, step: 1, label: "Refrigerator Plan 1 (kWh)"})
viewof fridge_plan2 = Inputs.range([0, 1230], {value: 1230, step: 1, label: "Refrigerator Plan 2 (kWh)"})
viewof other_plan1 = Inputs.range([0, 7350], {value: 7350, step: 1, label: "Other Plan 1 (kWh)"})
viewof other_plan2 = Inputs.range([0, 7350], {value: 7350, step: 1, label: "Other Plan 2 (kWh)"})

html`<h2>Action Plan Creation - Davis Family Electricity Reduction</h2>
<table style="width:100%; border:1px solid #dee2e6; border-collapse:collapse;">
  <thead style="background-color:#f8f9fa;">
    <tr>
      <th style="border:1px solid #dee2e6;">Category</th>
      <th style="border:1px solid #dee2e6;">Last Year (Davis Family)</th>
      <th style="border:1px solid #dee2e6;">Massachusetts Average</th>
      <th style="border:1px solid #dee2e6;">Action Plan 1</th>
      <th style="border:1px solid #dee2e6;">Action Plan 2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="border:1px solid #dee2e6;">Cooling (Central A/C)</td>
      <td style="border:1px solid #dee2e6;">419</td>
      <td style="border:1px solid #dee2e6;">322</td>
      <td style="border:1px solid #dee2e6;">${cooling_plan1}</td>
      <td style="border:1px solid #dee2e6;">${cooling_plan2}</td>
    </tr>
    <tr>
      <td style="border:1px solid #dee2e6;">Heating the Home</td>
      <td style="border:1px solid #dee2e6;">26,751</td>
      <td style="border:1px solid #dee2e6;">19,108</td>
      <td style="border:1px solid #dee2e6;">${heating_plan1}</td>
      <td style="border:1px solid #dee2e6;">${heating_plan2}</td>
    </tr>
    <tr>
      <td style="border:1px solid #dee2e6;">Water Heating</td>
      <td style="border:1px solid #dee2e6;">10,543</td>
      <td style="border:1px solid #dee2e6;">5,070</td>
      <td style="border:1px solid #dee2e6;">${water_plan1}</td>
      <td style="border:1px solid #dee2e6;">${water_plan2}</td>
    </tr>
    <tr>
      <td style="border:1px solid #dee2e6;">Refrigerator</td>
      <td style="border:1px solid #dee2e6;">1,230</td>
      <td style="border:1px solid #dee2e6;">1,025</td>
      <td style="border:1px solid #dee2e6;">${fridge_plan1}</td>
      <td style="border:1px solid #dee2e6;">${fridge_plan2}</td>
    </tr>
    <tr>
      <td style="border:1px solid #dee2e6;">Other (TV, Lighting, Electronics, etc.)</td>
      <td style="border:1px solid #dee2e6;">7,350</td>
      <td style="border:1px solid #dee2e6;">6,682</td>
      <td style="border:1px solid #dee2e6;">${other_plan1}</td>
      <td style="border:1px solid #dee2e6;">${other_plan2}</td>
    </tr>
    <tr>
      <td style="border:1px solid #dee2e6;"><strong>Total kWh</strong></td>
      <td style="border:1px solid #dee2e6;">46,293</td>
      <td style="border:1px solid #dee2e6;">32,207</td>
      <td style="border:1px solid #dee2e6;"><strong>${cooling_plan1 + heating_plan1 + water_plan1 + fridge_plan1 + other_plan1}</strong></td>
      <td style="border:1px solid #dee2e6;"><strong>${cooling_plan2 + heating_plan2 + water_plan2 + fridge_plan2 + other_plan2}</strong></td>
    </tr>
  </tbody>
</table>`

```






# v1 - orig

```{ojs}
viewof table2 = {
  // Create the main container
  const container = html`<div>
    <h2>Action Plan Creation - Davis Family Electricity Reduction</h2>
    <table class="table table-bordered">
      <thead>
        <tr>
          <th>Category</th>
          <th>Last Year (Davis Family)</th>
          <th>Massachusetts Average</th>
          <th>Action Plan 1</th>
          <th>Action Plan 2</th>
        </tr>
      </thead>
      <tbody>
        ${createRow("Cooling (Central A/C)", 419, 322)}
        ${createRow("Heating the Home", 26751, 19108)}
        ${createRow("Water Heating", 10543, 5070)}
        ${createRow("Refrigerator", 1230, 1025)}
        ${createRow("Other (TV, Lighting, Electronics, etc.)", 7350, 6682)}
        ${createTotalRow()}
      </tbody>
    </table>
  </div>`;

  // Helper function to create a row with sliders
  function createRow(category, lastYear, maAvg) {
    const row = html`<tr>
      <td>${category}</td>
      <td>${lastYear}</td>
      <td>${maAvg}</td>
      <td><input type="range" min="0" max="${lastYear}" value="${lastYear}" 
          oninput="this.nextElementSibling.value = this.value"
          style="width: 100%">
          <output>${lastYear}</output>
      </td>
      <td><input type="range" min="0" max="${lastYear}" value="${lastYear}" 
          oninput="this.nextElementSibling.value = this.value"
          style="width: 100%">
          <output>${lastYear}</output>
      </td>
    </tr>`;
    return row;
  }

  // Helper function to create the total row
  function createTotalRow() {
    const row = html`<tr>
      <td><strong>Total kWh</strong></td>
      <td>46,293</td>
      <td>32,207</td>
      <td id="total-plan1"><strong>46,293</strong></td>
      <td id="total-plan2"><strong>46,293</strong></td>
    </tr>`;
    return row;
  }

  // Add event listeners to update totals
  container.querySelectorAll('input[type="range"]').forEach(slider => {
    slider.addEventListener('input', updateTotals);
  });

  function updateTotals() {
    const rows = container.querySelectorAll('tr');
    let plan1Total = 0;
    let plan2Total = 0;

    // Sum up values from each row (excluding header and total rows)
    for (let i = 1; i < rows.length - 1; i++) {
      const plan1Value = parseInt(rows[i].querySelector('td:nth-child(4) output').value);
      const plan2Value = parseInt(rows[i].querySelector('td:nth-child(5) output').value);
      plan1Total += plan1Value;
      plan2Total += plan2Value;
    }

    // Update total displays
    container.querySelector('#total-plan1').textContent = plan1Total.toLocaleString();
    container.querySelector('#total-plan2').textContent = plan2Total.toLocaleString();
  }

  return container;
}

// Add CSS styles
html`
<style>
.table-bordered {
  border: 1px solid #dee2e6;
  width: 100%;
}
.table-bordered th, 
.table-bordered td {
  border: 1px solid #dee2e6;
  text-align: center;
  vertical-align: middle;
  padding: 8px;
}
input[type="range"] {
  width: 100%;
}
</style>
`
```
