[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R-shinylive app in Quarto!",
    "section": "",
    "text": "Action Plan Creation Task- Davis Family Electricity Reduction\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 650\nlibrary(shiny)\nlibrary(bslib)\n\nui &lt;- page_fluid(\n  theme = bs_theme(version = 5, bootswatch = \"flatly\"),\n  tags$head(\n    tags$style(HTML(\"\n      .table-bordered {\n        border: 1px solid #dee2e6;\n      }\n      .table-bordered th, \n      .table-bordered td {\n        border: 1px solid #dee2e6;\n        text-align: center;\n        vertical-align: middle;\n      }\n      .irs-bar,\n      .irs-bar-edge,\n      .irs-single,\n      .irs-grid-pol {\n        background: black;\n        border-color: black;\n      }\n      .irs-from, .irs-to, .irs-single {\n        background: black;\n        color: white;\n      }\n    \"))\n  ),\n  \n  h2(\"Action Plan Creation - Davis Family Electricity Reduction\"),\n  \n  fluidRow(\n    column(12,\n      tags$table(class = \"table table-bordered\",\n        tags$thead(\n          tags$tr(\n            tags$th(\"Category\"),\n            tags$th(\"Last Year (Davis Family)\"),\n            tags$th(\"Massachusetts Average\"),\n            tags$th(\"Action Plan 1\"),\n            tags$th(\"Action Plan 2\")\n          )\n        ),\n        tags$tbody(\n          # Cooling\n          tags$tr(\n            tags$td(\"Cooling (Central A/C)\"),\n            tags$td(\"419\"),\n            tags$td(\"322\"),\n            tags$td(\n              sliderInput(\"cooling_plan1\", NULL, \n                          min = 0, max = 419, \n                          value = 419, step = 1)\n            ),\n            tags$td(\n              sliderInput(\"cooling_plan2\", NULL, \n                          min = 0, max = 419, \n                          value = 419, step = 1)\n            )\n          ),\n          # Heating\n          tags$tr(\n            tags$td(\"Heating the Home\"),\n            tags$td(\"26,751\"),\n            tags$td(\"19,108\"),\n            tags$td(\n              sliderInput(\"heating_plan1\", NULL, \n                          min = 0, max = 26751, \n                          value = 26751, step = 1)\n            ),\n            tags$td(\n              sliderInput(\"heating_plan2\", NULL, \n                          min = 0, max = 26751, \n                          value = 26751, step = 1)\n            )\n          ),\n          # Water Heating\n          tags$tr(\n            tags$td(\"Water Heating\"),\n            tags$td(\"10,543\"),\n            tags$td(\"5,070\"),\n            tags$td(\n              sliderInput(\"water_plan1\", NULL, \n                          min = 0, max = 10543, \n                          value = 10543, step = 1)\n            ),\n            tags$td(\n              sliderInput(\"water_plan2\", NULL, \n                          min = 0, max = 10543, \n                          value = 10543, step = 1)\n            )\n          ),\n          # Refrigerator\n          tags$tr(\n            tags$td(\"Refrigerator\"),\n            tags$td(\"1,230\"),\n            tags$td(\"1,025\"),\n            tags$td(\n              sliderInput(\"fridge_plan1\", NULL, \n                          min = 0, max = 1230, \n                          value = 1230, step = 1)\n            ),\n            tags$td(\n              sliderInput(\"fridge_plan2\", NULL, \n                          min = 0, max = 1230, \n                          value = 1230, step = 1)\n            )\n          ),\n          # Other\n          tags$tr(\n            tags$td(\"Other (TV, Lighting, Electronics, etc.)\"),\n            tags$td(\"7,350\"),\n            tags$td(\"6,682\"),\n            tags$td(\n              sliderInput(\"other_plan1\", NULL, \n                          min = 0, max = 7350, \n                          value = 7350, step = 1)\n            ),\n            tags$td(\n              sliderInput(\"other_plan2\", NULL, \n                          min = 0, max = 7350, \n                          value = 7350, step = 1)\n            )\n          ),\n          # Total Row\n          tags$tr(\n            tags$td(strong(\"Total kWh\")),\n            tags$td(\"46,293\"),\n            tags$td(\"32,207\"),\n            tags$td(strong(textOutput(\"total_plan1\"))),\n            tags$td(strong(textOutput(\"total_plan2\")))\n          )\n        )\n      )\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  # Calculate totals for each plan\n  output$total_plan1 &lt;- renderText({\n    total &lt;- input$cooling_plan1 + \n             input$heating_plan1 + \n             input$water_plan1 + \n             input$fridge_plan1 + \n             input$other_plan1\n    format(total, big.mark = \",\")\n  })\n  \n  output$total_plan2 &lt;- renderText({\n    total &lt;- input$cooling_plan2 + \n             input$heating_plan2 + \n             input$water_plan2 + \n             input$fridge_plan2 + \n             input$other_plan2\n    format(total, big.mark = \",\")\n  })\n}\n\nshinyApp(ui, server)\n\n\n\n\naction plan - alternative\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 700\nlibrary(shiny)\nlibrary(bslib)\nlibrary(DT)\nlibrary(purrr)\n\n# Data for both families\nfamily_data &lt;- list(\n  \"Massachusetts\" = list(\n    current_usage = c(419, 26751, 10543, 1230, 7350),\n    average_usage = c(322, 19108, 5070, 1025, 6682),\n    reduction_target = 1042,  # in dollars\n    target_type = \"USD\"\n  ),\n  \"Colorado\" = list(\n    current_usage = c(697, 18052, 11667, 1370, 7882),\n    average_usage = c(498, 16411, 5832, 1142, 6652),\n    reduction_target = 5965,  # in kWh\n    target_type = \"kWh\"\n  )\n)\n\ncategories &lt;- c(\n  \"Cooling (Central A/C)\",\n  \"Heating the Home\",\n  \"Water Heating\",\n  \"Refrigerator\",\n  \"Other (Television, Lighting, Electronics, Washer/Dryer, etc.)\"\n)\n\nui &lt;- page_sidebar(\n  title = \"Electricity Usage Action Plan Creator\",\n  sidebar = sidebar(\n    title = \"Action Plan Controls\",\n    selectInput(\n      \"family\",\n      \"Select Family\",\n      choices = c(\"Massachusetts\", \"Colorado\")\n    ),\n    textOutput(\"target_text\"),\n    br(),\n    accordion(\n      accordion_panel(\n        \"Action Plan 1\",\n        uiOutput(\"plan1_sliders\")\n      ),\n      accordion_panel(\n        \"Action Plan 2\",\n        uiOutput(\"plan2_sliders\")\n      )\n    )\n  ),\n  \n  card(\n    card_header(\n      textOutput(\"family_header\")\n    ),\n    card_body(\n      DTOutput(\"comparison_table\"),\n      hr(),\n      h4(\"Summary\"),\n      textOutput(\"summary_text\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  \n  # Dynamic slider UI for Plan 1\n  output$plan1_sliders &lt;- renderUI({\n    current &lt;- family_data[[input$family]]$current_usage\n    average &lt;- family_data[[input$family]]$average_usage\n    \n    map(seq_along(categories), ~{\n      sliderInput(\n        inputId = paste0(\"plan1_\", .x),\n        label = categories[.x],\n        min = average[.x] * 0.5,\n        max = current[.x] * 1.2,\n        value = current[.x],\n        step = 1,\n        width = \"100%\"\n      )\n    })\n  })\n  \n  # Dynamic slider UI for Plan 2\n  output$plan2_sliders &lt;- renderUI({\n    current &lt;- family_data[[input$family]]$current_usage\n    average &lt;- family_data[[input$family]]$average_usage\n    \n    map(seq_along(categories), ~{\n      sliderInput(\n        inputId = paste0(\"plan2_\", .x),\n        label = categories[.x],\n        min = average[.x] * 0.5,\n        max = current[.x] * 1.2,\n        value = current[.x],\n        step = 1,\n        width = \"100%\"\n      )\n    })\n  })\n  \n  # Header with family name\n  output$family_header &lt;- renderText({\n    paste(input$family, \"Family Electricity Usage Plans\")\n  })\n  \n  # Target text\n  output$target_text &lt;- renderText({\n    family &lt;- family_data[[input$family]]\n    if (family$target_type == \"USD\") {\n      sprintf(\"Target reduction: $%d\", family$reduction_target)\n    } else {\n      sprintf(\"Target reduction: %d kWh\", family$reduction_target)\n    }\n  })\n  \n  # Reactive values for plan totals\n  plan1_total &lt;- reactive({\n    req(input$family)\n    sum(sapply(seq_along(categories), function(i) {\n      val &lt;- input[[paste0(\"plan1_\", i)]]\n      if (is.null(val)) return(family_data[[input$family]]$current_usage[i])\n      val\n    }))\n  })\n  \n  plan2_total &lt;- reactive({\n    req(input$family)\n    sum(sapply(seq_along(categories), function(i) {\n      val &lt;- input[[paste0(\"plan2_\", i)]]\n      if (is.null(val)) return(family_data[[input$family]]$current_usage[i])\n      val\n    }))\n  })\n  \n  # Create comparison table\n  output$comparison_table &lt;- renderDT({\n    req(input$family)\n    current_usage &lt;- family_data[[input$family]]$current_usage\n    average_usage &lt;- family_data[[input$family]]$average_usage\n    \n    plan1_values &lt;- sapply(seq_along(categories), function(i) {\n      val &lt;- input[[paste0(\"plan1_\", i)]]\n      if (is.null(val)) return(current_usage[i])\n      val\n    })\n    \n    plan2_values &lt;- sapply(seq_along(categories), function(i) {\n      val &lt;- input[[paste0(\"plan2_\", i)]]\n      if (is.null(val)) return(current_usage[i])\n      val\n    })\n    \n    data.frame(\n      Category = c(categories, \"Total kWh\"),\n      `Current Usage (kWh)` = c(current_usage, sum(current_usage)),\n      `Average Usage (kWh)` = c(average_usage, sum(average_usage)),\n      `Action Plan 1` = c(plan1_values, plan1_total()),\n      `Action Plan 2` = c(plan2_values, plan2_total())\n    ) |&gt;\n      datatable(\n        options = list(\n          dom = 't',\n          ordering = FALSE\n        ),\n        rownames = FALSE\n      )\n  })\n  \n  # Create summary text\n  output$summary_text &lt;- renderText({\n    req(input$family)\n    current_usage &lt;- family_data[[input$family]]$current_usage\n    target_type &lt;- family_data[[input$family]]$target_type\n    \n    if (target_type == \"USD\") {\n      current_cost &lt;- sum(current_usage) * 0.15\n      plan1_cost &lt;- plan1_total() * 0.15\n      plan2_cost &lt;- plan2_total() * 0.15\n      \n      sprintf(\n        \"Current annual cost: $%.2f\\nPlan 1 annual cost: $%.2f (savings: $%.2f)\\nPlan 2 annual cost: $%.2f (savings: $%.2f)\",\n        current_cost,\n        plan1_cost,\n        current_cost - plan1_cost,\n        plan2_cost,\n        current_cost - plan2_cost\n      )\n    } else {\n      current_kwh &lt;- sum(current_usage)\n      sprintf(\n        \"Current annual usage: %d kWh\\nPlan 1 annual usage: %d kWh (reduction: %d kWh)\\nPlan 2 annual usage: %d kWh (reduction: %d kWh)\",\n        current_kwh,\n        plan1_total(),\n        current_kwh - plan1_total(),\n        plan2_total(),\n        current_kwh - plan2_total()\n      )\n    }\n  })\n}\n\nshinyApp(ui, server)\n\n\nCode\n##| standalone: true\n##| viewerHeight: 100\n\n# ```{shinylive-r}\n\nlibrary(shiny)\nlibrary(bslib)\n\nui &lt;- page_sidebar(\n  sidebar = sidebar(\n    sliderInput(\"mySlider\", \n                \"Select a Value\", \n                min = 0, \n                max = 100, \n                value = 50)\n  ),\n  card(\n    card_header(\"Slider Value\"),\n    textOutput(\"sliderValue\")\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  output$sliderValue &lt;- renderText({\n    paste(\"Current Slider Value:\", input$mySlider)\n  })\n}\n\nshinyApp(ui, server)"
  },
  {
    "objectID": "sl_python.html",
    "href": "sl_python.html",
    "title": "Python-shinylive app in Quarto!",
    "section": "",
    "text": "Python Version\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 700\n\nfrom shiny import App, ui, render\nfrom pathlib import Path\n\napp_ui = ui.page_fluid(\n    ui.head_content(\n        ui.tags.style(\"\"\"\n            .table-bordered {\n                border: 1px solid #dee2e6;\n            }\n            .table-bordered th, \n            .table-bordered td {\n                border: 1px solid #dee2e6;\n                text-align: center;\n                vertical-align: middle;\n            }\n        \"\"\")\n    ),\n    ui.h2(\"Action Plan Creation - Davis Family Electricity Reduction\"),\n    ui.row(\n        ui.column(12,\n            ui.tags.table(\n                {\"class\": \"table table-bordered\"},\n                ui.tags.thead(\n                    ui.tags.tr(\n                        ui.tags.th(\"Category\"),\n                        ui.tags.th(\"Last Year (Davis Family)\"),\n                        ui.tags.th(\"Massachusetts Average\"),\n                        ui.tags.th(\"Action Plan 1\"),\n                        ui.tags.th(\"Action Plan 2\")\n                    )\n                ),\n                ui.tags.tbody(\n                    # Cooling row\n                    ui.tags.tr(\n                        ui.tags.td(\"Cooling (Central A/C)\"),\n                        ui.tags.td(\"419\"),\n                        ui.tags.td(\"322\"),\n                        ui.tags.td(\n                            ui.input_slider(\"cooling_plan1\", None, \n                                          min=0, max=419, \n                                          value=419, step=1)\n                        ),\n                        ui.tags.td(\n                            ui.input_slider(\"cooling_plan2\", None, \n                                          min=0, max=419, \n                                          value=419, step=1)\n                        )\n                    ),\n                    # Heating row\n                    ui.tags.tr(\n                        ui.tags.td(\"Heating the Home\"),\n                        ui.tags.td(\"26,751\"),\n                        ui.tags.td(\"19,108\"),\n                        ui.tags.td(\n                            ui.input_slider(\"heating_plan1\", None, \n                                          min=0, max=26751, \n                                          value=26751, step=1)\n                        ),\n                        ui.tags.td(\n                            ui.input_slider(\"heating_plan2\", None, \n                                          min=0, max=26751, \n                                          value=26751, step=1)\n                        )\n                    ),\n                    # Water Heating row\n                    ui.tags.tr(\n                        ui.tags.td(\"Water Heating\"),\n                        ui.tags.td(\"10,543\"),\n                        ui.tags.td(\"5,070\"),\n                        ui.tags.td(\n                            ui.input_slider(\"water_plan1\", None, \n                                          min=0, max=10543, \n                                          value=10543, step=1)\n                        ),\n                        ui.tags.td(\n                            ui.input_slider(\"water_plan2\", None, \n                                          min=0, max=10543, \n                                          value=10543, step=1)\n                        )\n                    ),\n                    # Refrigerator row\n                    ui.tags.tr(\n                        ui.tags.td(\"Refrigerator\"),\n                        ui.tags.td(\"1,230\"),\n                        ui.tags.td(\"1,025\"),\n                        ui.tags.td(\n                            ui.input_slider(\"fridge_plan1\", None, \n                                          min=0, max=1230, \n                                          value=1230, step=1)\n                        ),\n                        ui.tags.td(\n                            ui.input_slider(\"fridge_plan2\", None, \n                                          min=0, max=1230, \n                                          value=1230, step=1)\n                        )\n                    ),\n                    # Other row\n                    ui.tags.tr(\n                        ui.tags.td(\"Other (TV, Lighting, Electronics, etc.)\"),\n                        ui.tags.td(\"7,350\"),\n                        ui.tags.td(\"6,682\"),\n                        ui.tags.td(\n                            ui.input_slider(\"other_plan1\", None, \n                                          min=0, max=7350, \n                                          value=7350, step=1)\n                        ),\n                        ui.tags.td(\n                            ui.input_slider(\"other_plan2\", None, \n                                          min=0, max=7350, \n                                          value=7350, step=1)\n                        )\n                    ),\n                    # Total row\n                    ui.tags.tr(\n                        ui.tags.td(ui.tags.strong(\"Total kWh\")),\n                        ui.tags.td(\"46,293\"),\n                        ui.tags.td(\"32,207\"),\n                        ui.tags.td(ui.tags.strong(ui.output_text(\"total_plan1\"))),\n                        ui.tags.td(ui.tags.strong(ui.output_text(\"total_plan2\")))\n                    )\n                )\n            )\n        )\n    )\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def total_plan1():\n        total = (input.cooling_plan1() + \n                input.heating_plan1() + \n                input.water_plan1() + \n                input.fridge_plan1() + \n                input.other_plan1())\n        return f\"{total:,}\"\n    \n    @output\n    @render.text\n    def total_plan2():\n        total = (input.cooling_plan2() + \n                input.heating_plan2() + \n                input.water_plan2() + \n                input.fridge_plan2() + \n                input.other_plan2())\n        return f\"{total:,}\"\n\napp = App(app_ui, server)\n\n\nshinylive\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\nfrom shiny import *\nimport sys\n\napp_ui = ui.page_fluid(\n    ui.output_text_verbatim(\"txt\"),\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        return f\"Python version: {sys.version}\"\n\napp = App(app_ui, server)\n\n\n\npython\n\n\nMisc\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 500\n\nfrom shiny import App, render, ui\nimport numpy as np\nimport matplotlib.pyplot as plt\n\napp_ui = ui.page_fluid(\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"period\", \"Period\", 0.5, 4, 1, step=0.5),\n            ui.input_slider(\"amplitude\", \"Amplitude\", 0, 2, 1, step=0.25),\n            ui.input_slider(\"shift\", \"Phase shift\", 0, 2, 0, step=0.1),\n        ),\n        ui.output_plot(\"plot\"),\n    ),\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.plot(alt=\"Sine wave\")\n    def plot():\n        t = np.arange(0.0, 4.0, 0.01)\n        s = input.amplitude() * np.sin(\n            2 * np.pi / input.period() * (t - input.shift() / 2)\n        )\n        fig, ax = plt.subplots()\n        ax.set_ylim([-2, 2])\n        ax.plot(t, s)\n        ax.grid()\n\n\napp = App(app_ui, server)"
  },
  {
    "objectID": "ojs.html",
    "href": "ojs.html",
    "title": "ojs-shinylive app in Quarto!",
    "section": "",
    "text": "v1 - chatbot2\n\nworking but exposes api key\n\n\n\nCode\nviewof table = {\n  // Create the main container\n  const container = html`&lt;div&gt;\n    &lt;h2&gt;Action Plan Creation - Davis Family Electricity Reduction&lt;/h2&gt;\n    &lt;table class=\"table table-bordered\"&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;Category&lt;/th&gt;\n          &lt;th&gt;Last Year (Davis Family)&lt;/th&gt;\n          &lt;th&gt;Massachusetts Average&lt;/th&gt;\n          &lt;th&gt;Action Plan 1&lt;/th&gt;\n          &lt;th&gt;Action Plan 2&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        ${createRow(\"Cooling (Central A/C)\", 419, 322)}\n        ${createRow(\"Heating the Home\", 26751, 19108)}\n        ${createRow(\"Water Heating\", 10543, 5070)}\n        ${createRow(\"Refrigerator\", 1230, 1025)}\n        ${createRow(\"Other (TV, Lighting, Electronics, etc.)\", 7350, 6682)}\n        ${createTotalRow()}\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n    &lt;div class=\"chatBot\"&gt;\n      &lt;header&gt;\n        &lt;h3&gt;Energy Reduction Assistant&lt;/h3&gt;\n      &lt;/header&gt;\n      &lt;ul class=\"chatbox\"&gt;\n        &lt;li class=\"chat-incoming chat\"&gt;\n          &lt;p&gt;Hello! I can help you create an effective energy reduction plan. Feel free to ask questions about reducing electricity usage in any category.&lt;/p&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;div class=\"chat-input\"&gt;\n        &lt;textarea placeholder=\"Ask for advice about your action plan...\" rows=\"1\"&gt;&lt;/textarea&gt;\n        &lt;button id=\"sendBtn\"&gt;Send&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;`;\n\n\n  // Helper function to create a row with sliders\n  function createRow(category, lastYear, maAvg) {\n    const row = html`&lt;tr&gt;\n      &lt;td&gt;${category}&lt;/td&gt;\n      &lt;td&gt;${lastYear}&lt;/td&gt;\n      &lt;td&gt;${maAvg}&lt;/td&gt;\n      &lt;td&gt;&lt;input type=\"range\" min=\"0\" max=\"${lastYear}\" value=\"${lastYear}\" \n          oninput=\"this.nextElementSibling.value = this.value\"\n          style=\"width: 100%\"&gt;\n          &lt;output&gt;${lastYear}&lt;/output&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;input type=\"range\" min=\"0\" max=\"${lastYear}\" value=\"${lastYear}\" \n          oninput=\"this.nextElementSibling.value = this.value\"\n          style=\"width: 100%\"&gt;\n          &lt;output&gt;${lastYear}&lt;/output&gt;\n      &lt;/td&gt;\n    &lt;/tr&gt;`;\n    return row;\n  }\n\n  // Helper function to create the total row\n  function createTotalRow() {\n    const row = html`&lt;tr&gt;\n      &lt;td&gt;&lt;strong&gt;Total kWh&lt;/strong&gt;&lt;/td&gt;\n      &lt;td&gt;46,293&lt;/td&gt;\n      &lt;td&gt;32,207&lt;/td&gt;\n      &lt;td id=\"total-plan1\"&gt;&lt;strong&gt;46,293&lt;/strong&gt;&lt;/td&gt;\n      &lt;td id=\"total-plan2\"&gt;&lt;strong&gt;46,293&lt;/strong&gt;&lt;/td&gt;\n    &lt;/tr&gt;`;\n    return row;\n  }\n\n  // Add event listeners to update totals\n  container.querySelectorAll('input[type=\"range\"]').forEach(slider =&gt; {\n    slider.addEventListener('input', updateTotals);\n  });\n\n  function updateTotals() {\n    const rows = container.querySelectorAll('tr');\n    let plan1Total = 0;\n    let plan2Total = 0;\n\n    // Sum up values from each row (excluding header and total rows)\n    for (let i = 1; i &lt; rows.length - 1; i++) {\n      const plan1Value = parseInt(rows[i].querySelector('td:nth-child(4) output').value);\n      const plan2Value = parseInt(rows[i].querySelector('td:nth-child(5) output').value);\n      plan1Total += plan1Value;\n      plan2Total += plan2Value;\n    }\n\n    // Update total displays\n    container.querySelector('#total-plan1').textContent = plan1Total.toLocaleString();\n    container.querySelector('#total-plan2').textContent = plan2Total.toLocaleString();\n  }\n\n\n  // Attach event listeners only after elements are created\n  const chatInput = container.querySelector('.chat-input textarea');\n  const sendButton = container.querySelector('#sendBtn');\n  const chatbox = container.querySelector('.chatbox');\n\n  async function generateResponse(userMessage) {\n    try {\n        const config = await fetch('/config.json').then((res) =&gt; res.json());\n        const OPENAI_API_KEY = config.apiKey;\n        console.log(\"Calling GPT3\")\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${OPENAI_API_KEY}`,\n        },\n        body: JSON.stringify({\n          model: 'gpt-4o-mini',\n          messages: [\n            {\n              role: 'system',\n              content:\n                'You are an energy efficiency expert helping users create an electricity reduction plan. Focus on practical advice for reducing electricity usage in cooling, heating, water heating, refrigeration, and other household electronics.',\n            },\n            {\n              role: 'user',\n              content: userMessage,\n            },\n          ],\n        }),\n      });\n\n      const data = await response.json();\n      return data.choices[0].message.content;\n    } catch (error) {\n      return \"Sorry, I'm having trouble connecting. Please try again later.\";\n    }\n  }\n\n  function addMessage(message, isOutgoing = false) {\n    const li = document.createElement('li');\n    li.className = `chat ${isOutgoing ? 'chat-outgoing' : 'chat-incoming'}`;\n    li.innerHTML = `&lt;p&gt;${message}&lt;/p&gt;`;\n    chatbox.appendChild(li);\n    chatbox.scrollTop = chatbox.scrollHeight;\n  }\n\n  async function handleChat() {\n    const userMessage = chatInput.value.trim();\n    if (!userMessage) return;\n\n    addMessage(userMessage, true);\n    chatInput.value = '';\n\n    const response = await generateResponse(userMessage);\n    addMessage(response);\n  }\n\n  sendButton.addEventListener('click', handleChat);\n  chatInput.addEventListener('keyup', (e) =&gt; {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleChat();\n    }\n  });\n\n  return container;\n}\n\n\n\n\n\n\n\n\n\nalternative front-end response\n\nreads key from config.json.\n\n\n\nCode\nviewof table4 = {\n  // Create the main container\n  const container = html`&lt;div&gt;\n    &lt;h2&gt;Action Plan Creation - Davis Family Electricity Reduction&lt;/h2&gt;\n    &lt;table class=\"table table-bordered\"&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;Category&lt;/th&gt;\n          &lt;th&gt;Last Year (Davis Family)&lt;/th&gt;\n          &lt;th&gt;Massachusetts Average&lt;/th&gt;\n          &lt;th&gt;Action Plan 1&lt;/th&gt;\n          &lt;th&gt;Action Plan 2&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        ${createRow(\"Cooling (Central A/C)\", 419, 322)}\n        ${createRow(\"Heating the Home\", 26751, 19108)}\n        ${createRow(\"Water Heating\", 10543, 5070)}\n        ${createRow(\"Refrigerator\", 1230, 1025)}\n        ${createRow(\"Other (TV, Lighting, Electronics, etc.)\", 7350, 6682)}\n        ${createTotalRow()}\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n    &lt;div class=\"chatBot\"&gt;\n      &lt;header&gt;\n        &lt;h3&gt;Energy Reduction Assistant&lt;/h3&gt;\n      &lt;/header&gt;\n      &lt;ul class=\"chatbox\"&gt;\n        &lt;li class=\"chat-incoming chat\"&gt;\n          &lt;p&gt;Hello! I can help you create an effective energy reduction plan. Feel free to ask questions about reducing electricity usage in any category.&lt;/p&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;div class=\"chat-input\"&gt;\n        &lt;textarea placeholder=\"Ask for advice about your action plan...\" rows=\"1\"&gt;&lt;/textarea&gt;\n        &lt;button id=\"sendBtn\"&gt;Send&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;`;\n\n\n  // Helper function to create a row with sliders\n  function createRow(category, lastYear, maAvg) {\n    const row = html`&lt;tr&gt;\n      &lt;td&gt;${category}&lt;/td&gt;\n      &lt;td&gt;${lastYear}&lt;/td&gt;\n      &lt;td&gt;${maAvg}&lt;/td&gt;\n      &lt;td&gt;&lt;input type=\"range\" min=\"0\" max=\"${lastYear}\" value=\"${lastYear}\" \n          oninput=\"this.nextElementSibling.value = this.value\"\n          style=\"width: 100%\"&gt;\n          &lt;output&gt;${lastYear}&lt;/output&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;input type=\"range\" min=\"0\" max=\"${lastYear}\" value=\"${lastYear}\" \n          oninput=\"this.nextElementSibling.value = this.value\"\n          style=\"width: 100%\"&gt;\n          &lt;output&gt;${lastYear}&lt;/output&gt;\n      &lt;/td&gt;\n    &lt;/tr&gt;`;\n    return row;\n  }\n\n  // Helper function to create the total row\n  function createTotalRow() {\n    const row = html`&lt;tr&gt;\n      &lt;td&gt;&lt;strong&gt;Total kWh&lt;/strong&gt;&lt;/td&gt;\n      &lt;td&gt;46,293&lt;/td&gt;\n      &lt;td&gt;32,207&lt;/td&gt;\n      &lt;td id=\"total-plan1\"&gt;&lt;strong&gt;46,293&lt;/strong&gt;&lt;/td&gt;\n      &lt;td id=\"total-plan2\"&gt;&lt;strong&gt;46,293&lt;/strong&gt;&lt;/td&gt;\n    &lt;/tr&gt;`;\n    return row;\n  }\n\n  // Add event listeners to update totals\n  container.querySelectorAll('input[type=\"range\"]').forEach(slider =&gt; {\n    slider.addEventListener('input', updateTotals);\n  });\n\n  function updateTotals() {\n    const rows = container.querySelectorAll('tr');\n    let plan1Total = 0;\n    let plan2Total = 0;\n\n    // Sum up values from each row (excluding header and total rows)\n    for (let i = 1; i &lt; rows.length - 1; i++) {\n      const plan1Value = parseInt(rows[i].querySelector('td:nth-child(4) output').value);\n      const plan2Value = parseInt(rows[i].querySelector('td:nth-child(5) output').value);\n      plan1Total += plan1Value;\n      plan2Total += plan2Value;\n    }\n\n    // Update total displays\n    container.querySelector('#total-plan1').textContent = plan1Total.toLocaleString();\n    container.querySelector('#total-plan2').textContent = plan2Total.toLocaleString();\n  }\n\n\n  // Attach event listeners only after elements are created\n  const chatInput = container.querySelector('.chat-input textarea');\n  const sendButton = container.querySelector('#sendBtn');\n  const chatbox = container.querySelector('.chatbox');\n\n\n// Authorization: `Bearer ${OPENAI_API_KEY}`\n\n\n  async function generateResponse(userMessage) {\n    try {\n  const config = await fetch('/config.json').then((res) =&gt; res.json());\n    console.log(config)\n  const OPENAI_API_KEY = config.apiKey;\n        console.log(\"Calling GPT3\")\n\n\n        const response = await fetch('https://api.openai.com/v1/chat/completions', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json',\n                Authorization: `Bearer ${OPENAI_API_KEY}`,\n             },\n            body: JSON.stringify({\n                model: 'gpt-4o-mini',\n                messages: [\n                {\n                    role: 'system',\n                    content:\n                    'You are an energy efficiency expert helping users create an electricity reduction plan.',\n                },\n                {\n                    role: 'user',\n                    content: userMessage,\n                },\n                ],\n            }),\n            });\n\n      const data = await response.json();\n      return data.choices[0].message.content;\n    } catch (error) {\n      return \"Sorry, I'm having trouble connecting. Please try again later.\";\n    }\n  }\n\n  function addMessage(message, isOutgoing = false) {\n    const li = document.createElement('li');\n    li.className = `chat ${isOutgoing ? 'chat-outgoing' : 'chat-incoming'}`;\n    li.innerHTML = `&lt;p&gt;${message}&lt;/p&gt;`;\n    chatbox.appendChild(li);\n    chatbox.scrollTop = chatbox.scrollHeight;\n  }\n\n  async function handleChat() {\n    const userMessage = chatInput.value.trim();\n    if (!userMessage) return;\n\n    addMessage(userMessage, true);\n    chatInput.value = '';\n\n    const response = await generateResponse(userMessage);\n    addMessage(response);\n  }\n\n  sendButton.addEventListener('click', handleChat);\n  chatInput.addEventListener('keyup', (e) =&gt; {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleChat();\n    }\n  });\n\n  return container;\n}\n\n\n\n\n\n\n\n\n\nv2 4o\n\n\nCode\nviewof cooling_plan1 = Inputs.range([0, 419], {value: 419, step: 1, label: \"Cooling Plan 1 (kWh)\"})\nviewof cooling_plan2 = Inputs.range([0, 419], {value: 419, step: 1, label: \"Cooling Plan 2 (kWh)\"})\nviewof heating_plan1 = Inputs.range([0, 26751], {value: 26751, step: 1, label: \"Heating Plan 1 (kWh)\"})\nviewof heating_plan2 = Inputs.range([0, 26751], {value: 26751, step: 1, label: \"Heating Plan 2 (kWh)\"})\nviewof water_plan1 = Inputs.range([0, 10543], {value: 10543, step: 1, label: \"Water Heating Plan 1 (kWh)\"})\nviewof water_plan2 = Inputs.range([0, 10543], {value: 10543, step: 1, label: \"Water Heating Plan 2 (kWh)\"})\nviewof fridge_plan1 = Inputs.range([0, 1230], {value: 1230, step: 1, label: \"Refrigerator Plan 1 (kWh)\"})\nviewof fridge_plan2 = Inputs.range([0, 1230], {value: 1230, step: 1, label: \"Refrigerator Plan 2 (kWh)\"})\nviewof other_plan1 = Inputs.range([0, 7350], {value: 7350, step: 1, label: \"Other Plan 1 (kWh)\"})\nviewof other_plan2 = Inputs.range([0, 7350], {value: 7350, step: 1, label: \"Other Plan 2 (kWh)\"})\n\nhtml`&lt;h2&gt;Action Plan Creation - Davis Family Electricity Reduction&lt;/h2&gt;\n&lt;table style=\"width:100%; border:1px solid #dee2e6; border-collapse:collapse;\"&gt;\n  &lt;thead style=\"background-color:#f8f9fa;\"&gt;\n    &lt;tr&gt;\n      &lt;th style=\"border:1px solid #dee2e6;\"&gt;Category&lt;/th&gt;\n      &lt;th style=\"border:1px solid #dee2e6;\"&gt;Last Year (Davis Family)&lt;/th&gt;\n      &lt;th style=\"border:1px solid #dee2e6;\"&gt;Massachusetts Average&lt;/th&gt;\n      &lt;th style=\"border:1px solid #dee2e6;\"&gt;Action Plan 1&lt;/th&gt;\n      &lt;th style=\"border:1px solid #dee2e6;\"&gt;Action Plan 2&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;Cooling (Central A/C)&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;419&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;322&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;${cooling_plan1}&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;${cooling_plan2}&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;Heating the Home&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;26,751&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;19,108&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;${heating_plan1}&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;${heating_plan2}&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;Water Heating&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;10,543&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;5,070&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;${water_plan1}&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;${water_plan2}&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;Refrigerator&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;1,230&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;1,025&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;${fridge_plan1}&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;${fridge_plan2}&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;Other (TV, Lighting, Electronics, etc.)&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;7,350&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;6,682&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;${other_plan1}&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;${other_plan2}&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;&lt;strong&gt;Total kWh&lt;/strong&gt;&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;46,293&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;32,207&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;&lt;strong&gt;${cooling_plan1 + heating_plan1 + water_plan1 + fridge_plan1 + other_plan1}&lt;/strong&gt;&lt;/td&gt;\n      &lt;td style=\"border:1px solid #dee2e6;\"&gt;&lt;strong&gt;${cooling_plan2 + heating_plan2 + water_plan2 + fridge_plan2 + other_plan2}&lt;/strong&gt;&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nv1 - orig\n\n\nCode\nviewof table2 = {\n  // Create the main container\n  const container = html`&lt;div&gt;\n    &lt;h2&gt;Action Plan Creation - Davis Family Electricity Reduction&lt;/h2&gt;\n    &lt;table class=\"table table-bordered\"&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;Category&lt;/th&gt;\n          &lt;th&gt;Last Year (Davis Family)&lt;/th&gt;\n          &lt;th&gt;Massachusetts Average&lt;/th&gt;\n          &lt;th&gt;Action Plan 1&lt;/th&gt;\n          &lt;th&gt;Action Plan 2&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        ${createRow(\"Cooling (Central A/C)\", 419, 322)}\n        ${createRow(\"Heating the Home\", 26751, 19108)}\n        ${createRow(\"Water Heating\", 10543, 5070)}\n        ${createRow(\"Refrigerator\", 1230, 1025)}\n        ${createRow(\"Other (TV, Lighting, Electronics, etc.)\", 7350, 6682)}\n        ${createTotalRow()}\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;`;\n\n  // Helper function to create a row with sliders\n  function createRow(category, lastYear, maAvg) {\n    const row = html`&lt;tr&gt;\n      &lt;td&gt;${category}&lt;/td&gt;\n      &lt;td&gt;${lastYear}&lt;/td&gt;\n      &lt;td&gt;${maAvg}&lt;/td&gt;\n      &lt;td&gt;&lt;input type=\"range\" min=\"0\" max=\"${lastYear}\" value=\"${lastYear}\" \n          oninput=\"this.nextElementSibling.value = this.value\"\n          style=\"width: 100%\"&gt;\n          &lt;output&gt;${lastYear}&lt;/output&gt;\n      &lt;/td&gt;\n      &lt;td&gt;&lt;input type=\"range\" min=\"0\" max=\"${lastYear}\" value=\"${lastYear}\" \n          oninput=\"this.nextElementSibling.value = this.value\"\n          style=\"width: 100%\"&gt;\n          &lt;output&gt;${lastYear}&lt;/output&gt;\n      &lt;/td&gt;\n    &lt;/tr&gt;`;\n    return row;\n  }\n\n  // Helper function to create the total row\n  function createTotalRow() {\n    const row = html`&lt;tr&gt;\n      &lt;td&gt;&lt;strong&gt;Total kWh&lt;/strong&gt;&lt;/td&gt;\n      &lt;td&gt;46,293&lt;/td&gt;\n      &lt;td&gt;32,207&lt;/td&gt;\n      &lt;td id=\"total-plan1\"&gt;&lt;strong&gt;46,293&lt;/strong&gt;&lt;/td&gt;\n      &lt;td id=\"total-plan2\"&gt;&lt;strong&gt;46,293&lt;/strong&gt;&lt;/td&gt;\n    &lt;/tr&gt;`;\n    return row;\n  }\n\n  // Add event listeners to update totals\n  container.querySelectorAll('input[type=\"range\"]').forEach(slider =&gt; {\n    slider.addEventListener('input', updateTotals);\n  });\n\n  function updateTotals() {\n    const rows = container.querySelectorAll('tr');\n    let plan1Total = 0;\n    let plan2Total = 0;\n\n    // Sum up values from each row (excluding header and total rows)\n    for (let i = 1; i &lt; rows.length - 1; i++) {\n      const plan1Value = parseInt(rows[i].querySelector('td:nth-child(4) output').value);\n      const plan2Value = parseInt(rows[i].querySelector('td:nth-child(5) output').value);\n      plan1Total += plan1Value;\n      plan2Total += plan2Value;\n    }\n\n    // Update total displays\n    container.querySelector('#total-plan1').textContent = plan1Total.toLocaleString();\n    container.querySelector('#total-plan2').textContent = plan2Total.toLocaleString();\n  }\n\n  return container;\n}\n\n// Add CSS styles\nhtml`\n&lt;style&gt;\n.table-bordered {\n  border: 1px solid #dee2e6;\n  width: 100%;\n}\n.table-bordered th, \n.table-bordered td {\n  border: 1px solid #dee2e6;\n  text-align: center;\n  vertical-align: middle;\n  padding: 8px;\n}\ninput[type=\"range\"] {\n  width: 100%;\n}\n&lt;/style&gt;\n`"
  },
  {
    "objectID": "rep_followup.html",
    "href": "rep_followup.html",
    "title": "Representation_Study Follow-up",
    "section": "",
    "text": "Conditions:\n\nCondition 1: Information Search Assistance: Participants receive AI support during the information search phase but not during plan formation.\nCondition 2: Plan Formation Assistance: Participants receive AI support during plan formation but not during information search.\nCondition 3: Choice of Assistance: Participants can choose to use the AI for either information search, plan formation, both, or neither. The level of uncertainty in each stage will be manipulated (e.g., by varying the number of information options or the difficulty of the reduction goal).\nCondition 4: No AI Assistance (Control): Participants receive no AI support during either stage.\n\nManipulations\n\nReliability of AI\n\nAI is poor at information search, poor at plan creation, or poor at both.\n\nPlan Formation Reliability:\nUncertainty in the task\n\nSearch uncertainty: number of options\n\nsmall option set, easy to interpret\nlarge option set, difficult to interpret\n\nPlan uncertainty: difficulty of the reduction goal\n\nConstraints on which/how much utility parameters can be adjusted\n\ne.g., “heating cannot decrease by more than 5%”\n\nDegree of precision required in the reduction goal\n\ne.g., exactly 10% vs. at least 10%\n\n\n\nAI assigned to task vs. user chooses\n\n \n\nTask Alt 1\n\n\n\n\n\n \n\n\nTask alt 2"
  }
]